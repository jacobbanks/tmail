name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.24.1

      - name: Install dependencies
        run: |
          go mod download
          go install golang.org/x/lint/golint@latest

      - name: Format check
        run: |
          go fmt ./...
          if [ $(git status --porcelain | wc -l) -gt 0 ]; then
            echo "Code is not properly formatted. Please run 'go fmt ./...' locally."
            git status --porcelain
            exit 1
          fi

      - name: Lint
        run: golint ./...

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.24.1

      - name: Build
        run: make build

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.24.1

      - name: Install dependencies
        run: go mod download

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Update version
        run: |
          echo "Updating version.go to $VERSION"
          sed -i "s/Version = \"[^\"]*\"/Version = \"$VERSION\"/" version.go
          cat version.go

      - name: Build release binaries
        run: make release

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/tmail-${{ env.VERSION }}-*
            build/checksums-${{ env.VERSION }}.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
